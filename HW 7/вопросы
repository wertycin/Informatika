1) Основные варианты отношений между классами:
  1. композиция - А часть Б, под упрвлением Б, не знает о Б
  2. агрегация - А часть Б1, Б2, ..., не управляется ими, не знает их
  3. ассоциация - независимые объекты, используют друг друга
  4. зависимость - использование без хранения связи с объектом
  
2) Существуют следующие разновидности наследования:
  1. публичное (public, наследование интерфейсов) - потомок содержит все функции-члены предка; public наследуется как public, protected наследуется как protected, private не наследуется
  2. приватное (private, наследование реализаций) - потомок наследует только реализацию; public наследуется как private, protected наследуется как private, private не наследуется
  3. защищенное (protected) - потомки потомка наследуют реализацию своего прапредка; public наследуется как protected, protected как protected, private не наследуется

3) Для корректного функционирования механизма виртуальных функций необходимо наличие наследования, слова virtual и совпадения принимаемых и возвращаемых типов данных

4) Виртуальные базовые классы при множественном наследовании решают проблему неоднозначного выбора между общими данными: если Д1 и Д2 потомки Р, а В - потомок Д1 и Д2 одновременно, то В имеет доступ к данным Р от Д1 и Д2, но эти данные унаследованы от уже независимых относительно Д1 и Д2 классов Р (Д1(Р) и Д2(Р))

5) Основные паттерны проектирования: 
1. порождающие: отвечают за удобное и безопасное создание новых объектов или даже целых семейств объектов
2. структурные: отвечают за построение удобных в поддержке иерархий классов.
3. поведенческие: решают задачи эффективного и безопасного взаимодействия между объектами программы.
