1) Способы обработки ошибок:
  1. Обработка на месте:
    if-then-else - для проверки пользовательского ввода
    abort-exit-terminate - аварийное завершение работы
    assert - разыменование nullptr, ошибка программиста
   2. Передача информации об ошибке (уведомление):
    коды возврата (с-стиль, 2 способа: return + &
    механизм исключений (с++-стиль, ООП, классы)
    другие способы (будут рассмотрены в STL)
    
2) Недостаток механизма кодов вовзрата заключается в том, что при return зачастую невозможно понять, является ли возвращаемое значение кодом возврата или нормальным значением

3) Механизм исключений обладает следующими особенностями:
  1. Многоуровневость (вложенность)
  2. Эффективность
  3. Преобразования

4) Спецификатор noexpect для функции - это метод, с помощью которого программист сообщает компилятору, должна ли функция создавать исключения; унарный условный оператор noexcept(constant_expression), где constant_expression выдает true и его безусловный синоним noexcept, указывает, что набор возможных типов исключений, которые могут выходить из функции, пуст. Это значит, что функция никогда не создает исключение и никогда не позволяет распространять исключение за пределы области действия. Оператор noexcept(constant_expression), где выдается constant_expression false, или отсутствие спецификации исключения (кроме деструктора или функции освобождения) указывает, что набор возможных исключений, которые могут выйти из функции, — это набор всех типов.

5) Гарантии безопасности исключений:
  1. nothrow - гарантируется, что исключение не будет выброшено наружу
  2. strong - допускается проброс исключений, однако гарантируется сохранение всего исходного состояния в случае исключения
  3. basic - допускается изменение состояния, однако сохраняется ивариант, утечки ресурсов не допускаются
